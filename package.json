{
  "name": "mysql-in-docker",
  "version": "1.0.6",
  "os": [
    "darwin",
    "linux"
  ],
  "description": "",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "rm -rf ./dist && tsc && cp ./Dockerfile* ./*.cnf ./dist",
    "test": "npm run build && mocha --require ts-node/register --bail --timeout 0 --slow 600000 test/*.spec.ts",
    "test-wtfnode": "npm run build && mocha --require ts-node/register --bail --timeout 0 --slow 600000 ---wtfnode test/*.spec.ts",
    "lint": "tslint *.ts test/*.ts",
    "watch": "nodemon -e ts -x \"npm run test\"",
    "prettier": "prettier --write *.ts test/*.ts",
    "postinstall": "niv sequelize@3.30.2 --destination sequelize3",
    "update-readme": "node -e \"var fs = require('fs');var j = JSON.parse(fs.readFileSync('./package.json'));var r = fs.readFileSync('./README.md', { encoding: 'utf8' });var d = JSON.stringify(Object.assign(j, { readme: r}), null, 2);fs.writeFileSync('./package.json', d, {encoding: 'utf8'});\""
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run prettier && npm run lint && npm test"
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ladeiko/mysql-in-docker.git"
  },
  "bugs": {
    "url": "https://github.com/ladeiko/mysql-in-docker/issues"
  },
  "homepage": "https://github.com/ladeiko/mysql-in-docker",
  "author": "Siarhei Ladzeika",
  "license": "SEE LICENSE IN <LICENSE>",
  "devDependencies": {
    "@types/mocha": "^5.2.5",
    "husky": "^1.1.3",
    "lodash": "^4.17.11",
    "mocha": "^5.2.0",
    "nodemon": "^1.18.6",
    "prettier": "^1.15.2",
    "should": "^13.2.3",
    "tmp": "0.0.33",
    "ts-node": "^7.0.1",
    "tslint": "^5.11.0",
    "typescript": "^3.1.6",
    "wtfnode": "^0.7.3"
  },
  "dependencies": {
    "@types/lodash": "^4.14.118",
    "@types/node": "^10.12.9",
    "mysql": "^2.16.0",
    "mysql2": "^1.6.4",
    "node-cleanup": "^2.1.2",
    "npm-install-version": "^6.0.2",
    "sequelize": "^4.41.2"
  },
  "readme": "# mysql-in-docker\n\n## Purpose\n\nModule starts mysql server inside docker container. This is helpful while testing.\n\n## Installation\n\nNOTE: Docker required.\n\n```\nnpm i mysql-in-docker --save\n```\n\n## Usage\n\n### IMySqlInDockerOptions options\n\n```\ninterface IMySqlInDockerOptions {\n\n  // database name to create [optional]\n  database?: string;\n\n  // database user name to create [optional]\n  user?: string;\n\n  // database user password to create [optional]\n  password?: string;\n\n  // if true, then sequelize v3 will be used for models [optional]\n  sequelizeV3?: boolean;\n\n  // use mysql v8, by default v5 is used [optional]\n  // NOTE: sequelizeV3=true, is not compatible with mysqlV8=true\n  mysqlV8?: boolean;\n\n  // path to folder(s)/file(s) with sequelize models [optional]\n  models?: string | string[];\n\n  // path with sql scripts [optional]\n  // this path is used when you specify 'my-query.sql' in query instead of\n  // sql query, module tries to locate 'my-query.sql' inside this folder\n  scriptsDir?: string;\n\n  // if true, all actions will be logged to console, default is false [optional]\n  verbose?: boolean;\n\n  // if specified, then it will be used to store mysql database after shutdown\n  // note: should be accessible by docker\n  storage?: string;\n}\n```\n\n### Methods\n\n#### constructor(options?: IMySqlInDockerOptions)\nConstructor\n\n#### start()\n\nStarts docker container with mysql server.\nIf succeeded, then ```port```, ```host```, etc. properties become available.\n\n#### stop()\nStops running docker container.\nAfter completion all ```port```, ```host```, etc. properties become unavailable.\n\n#### execSql(query: string) => \\[RowDataPacket\\]\n\nReturns method to be used to execute SQL queries. Query also can contain\nname of the file to be executed, e.g: my-query.sql. Returns rows.\n\n#### model(name) => SequelizeModel | undefined\n\nReturn sequelize model by name, if they where loaded from specified path(s).\n\n### Properties\n\n#### host: string | undefined\n\nReturns domain or ip of running MySql server.\n\n#### port: number | undefined\n\nReturns port MySql server is listening to.\n\n#### database: string | undefined\n\nReturns name of database.\n\n#### user: string | undefined\n\nReturns mysql user.\n\n#### password: string | undefined\n\nReturns mysql password for user.\n\n### Example\n\n```\nconst MySqlContainer  = require('mysql-in-docker');\n\nasync function main() {\n  const options = {\n    // See IMySqlInDockerOptions\n  };\n\n  // instantiate\n  const container = new MySqlContainer(options);\n\n  // boot\n  await container.start();\n\n  const port = container.port;\n  const host = container.host;\n  const database = container.database;\n  const user = container.user;\n  const password = container.password;\n\n  // do some work\n  ...\n\n  // shutdown\n  await container.stop();\n}\n\n```\n\nor if you want to use storage:\n\n```\nconst MySqlContainer  = require('mysql-in-docker');\n\nasync function main() {\n  const options = {\n    // See IMySqlInDockerOptions\n\n    storage: '/my-path'\n\n    // we should explicitly specify database, user and password\n    //  to be able to use it after restore\n    database: 'test',\n    user: 'test',\n    password: 'test',\n  };\n\n  // instantiate\n  const container = new MySqlContainer(options);\n\n  // boot\n  await container.start();\n\n  const port = container.port;\n  const host = container.host;\n  const database = container.database;\n  const user = container.user;\n  const password = container.password;\n\n  // do some work\n  ...\n\n  // shutdown\n  await container.stop();\n\n  // Restore after some from the same storage\n  await container.start();\n\n  // Work with restored database\n  ...\n\n  // shutdown again\n  await container.stop();\n}\n\n```\n\n## License\n\nMIT. See [LICENSE](LICENSE)\n\n## Author\n\nSiarhei Ladzeika <sergey.ladeiko@gmail.com>\n"
}